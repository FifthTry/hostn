;; create-instance-api
;; <service-endpoint>/api/create-instance/

-- ds.page: create-instance
id: create-instance-api

This API deploys and launches the user package
as a fly app by communicating with the fly Machines API.

URL: `<service-endpoint>/api/create-instance/`

Request Type: `POST`

-- ds.h1: Operations involved

When creating and deploying a user package at fly.io, this API performs
these following operations listed below.

-- ds.h2: Creation of fly app with the given package name

To achieve this, this API makes `POST request` to the fly Machines API
through a local proxy endpoint. It will return `status 201` on
successful creation of an app at fly.io.

-- ds.code: POST request to create a fly app
lang: bash

curl -i -X POST \
-H "Authorization: Bearer <FLY_API_TOKEN>" -H "Content-Type: application/json" \
"http://<FLY_MACHINE_API_LOCAL_ENDPOINT>/v1/apps" \
-d '{
  "app_name": <FLY_APP_NAME>,
  "org_slug": "fifthtry"
}'

-- container: create-instance-api

-- ds.markdown:

Refer fly docs for more information -
[create a fly app](https://fly.io/docs/reference/machines/#create-a-fly-application)

-- ds.h2: Creation of machine instance

This phase of operation creates a machine instance which runs the
docker image serving the package from the given download base url.
To create a machine instance, this API makes a `POST request`
to the fly Machines API through a local proxy endpoint. It will return
`status 200` on successful creation of machine instance for the
associated fly app.

-- ds.markdown:

For user package deployment `APP_DOCKER` will be used.
For controller service deployment `CONTROLLER_DOCKER` will be used.
Mention these dockers inside [local_settings.py](id: local-settings-file)
before using this service.

-- ds.code: POST request to create a machine instance
lang: bash

curl -i -X POST \
-H "Authorization: Bearer ${FLY_API_TOKEN}" -H "Content-Type: application/json" \
"http://${FLY_API_HOSTNAME}/v1/apps/user-functions/machines" \
-d '{
  "name": "quirky-machine",
  "config": {
    "image": "flyio/fastify-functions",
    "env": {
      "APP_ENV": "production"
    },
    "services": [
      {
        "ports": [
          {
            "port": 443,
            "handlers": [
              "tls",
              "http"
            ]
          },
          {
            "port": 80,
            "handlers": [
              "http"
            ]
          }
        ],
        "protocol": "tcp",
        "internal_port": 8080
      }
    ]
  }
}'

-- container: create-instance-api

-- ds.markdown:

Refer fly docs for more information -
[create a machine instance](https://fly.io/docs/reference/machines/#create-a-machine)

-- ds.h2: Assigning a global IP to the deployed app

This step assigns a global ipv4 address for the deployed app
through which the user can access his/her deployed app instance.
To assign a global ipv4 address for the deployed app, allocate one
using flyctl.

-- ds.code:
lang: bash

flyctl ips allocate-v4 -a <FLY_APP_NAME>

-- container: create-instance-api

-- ds.markdown:

Refer fly docs for more information -
[how to allocate ipv4 address](https://fly.io/docs/reference/machines/#allocate-an-ip-address-for-global-request-routing)
