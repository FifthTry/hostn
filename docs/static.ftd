-- ds.page: HostN Static Architecture

-- ds.h1: HostN Static S3 Interface: HSSI

We have reader and writers, and they communicate with each other via HSSI.

$BUCKET/<package-name>/LIST.tejar-list
$BUCKET/<package-name>/FILES.tejar-data

Eg: $BUCKET/amitu.com/LIST.tejar-list or $BUCKET/window-button.fastn-apps.com/LIST.tejar-list.

-- ds.h2: Domain Only Packages

This service does not support package-names that are not domain names: eg foo.com is 
supported but foo.com/bar is not supported.

-- ds.h2: Case Insensitive Domains

Package-name would be case insensitive, and names would be lowercased before 
storage/matching. This is the expected behaviour for dealing with domain names as they
domains supposed to be case insensitive.



-- ds.h1: HostN Static Reader: HSR

This is a HTTP service deployed on Heroku (for now). All read requests land to this service.

Source code of HSR is in FifthTry/hsr repo.

-- ds.h2: Only GET and HEAD methods

HSR only supports these two methods. All other methods give <DISALLOED METHODS ERROR>.

-- ds.h2: Package Name Is Domain


-- ds.h2: Read Operation

HSR service reads the domain name by reading the HOST header. Domain name is the package name.

HSR then reads the `$BUCKET/<package-name>/LIST.tejar-list`. 

If LIST.json is missing it returns 404 (with reason: no such package). Reason will be embedded
in the HTML response.

Path to file mapping: Then HSR finds the document corresponding to the request path. Eg if 
path is `/` it looks for index.html, `/foo/`: `foo/index.html` and for `anything/with.extension` 
it looks for `anything/with.extension`.

HSR then checks if the file is present in LIST.tejar-list, if not it returns 404 with reason: no 
such file.

HSR then finds the start and length from LIST.tejar-list for the `file`. And makes a read request to
`$BUCKET/<package-name>/FILES.tejar-data` with start and lenth, and serves the file.

Mime Type Handling: LIST.json also contains extensions.

-- ds.h2: read_list()

-- ds.code:
lang: rs

async fn read_list(package_name: String) -> std::io::Result<String>

-- ds.markdown:

The string returned by `hsr::read_list()` is passed to `tajar::read()`.

-- ds.h2: read_in_memory()

-- ds.code:
lang: rs

async fn read_in_memory(files_tejar: String, start: u32, size: u32) -> tokio::io::Result<Vec<u8>>

-- ds.markdown:

`file` would be something like `$BUCKET/<package-name>/FILES.tejar-data`.

We will call this function if file size is less than or equal to `hsr::CACHE_TRESHOLD`.


-- ds.h2: HSR Cache

In the updated design of `tejar`, `tejar::TejarRecord` will also contain the checksum of the file.
and `LIST.tejar-list` will also conatin the latest `<some-unique-number>-FILES.tejar-data` name of the data file.

-- ds.code:
lang: rs

pub struct TejarRecord {
    file_name: String,
    offset: u32,
    file_size: u32,
    content_type: String,
    checksum: Vec<u8>
}

pub struct Reader {
    content_file_name: String,
    list: Vec<TejarRecord>,
}

-- ds.markdown:

In `hsr` we cache `PACKAGE_LIST_CACHE` which is of type `lru::LruCache<String, tejar::Reader>>` and it will also
store the timestamp when it is last cached. In background `hrs` service will keep updating `PACKAGE_LIST_CACHE` 
as per `CACHE_EXPIRY` unit(minute or so).

Another cache that we maintain in `hsr` is `FILES_CACHE`, which is of type `lru::LruCache<Vec<u8>, Vec<u8>>`, which maps
`checksum` to `file content`.

With this approach, we will get the updated content after, if `CACHE_EXPIRY` becomes lesser than since `PACKAGE_LIST_CACHE` 
last updated time.

-- ds.h2: streaming_read()

-- ds.code:
lang: ftd

async fn streaming_read(files_tejar: String, start: u32, size: u32) -> 
  impl Stream<Item=Vec<u8>>


-- ds.markdown:

`file` would be something like `$BUCKET/<package-name>/FILES.tejar-data`.

This function reads content from S3 in a streaming way. This will be called if file size
is bigger than `hsr::CACHE_TRESHOLD`, and will be sent to browser in a streaming way.

Preferred: 

https://stackoverflow.com/questions/56435409/

This gives us a stream: https://docs.rs/reqwest/latest/reqwest/struct.Response.html#method.bytes_stream

This takes the stream returns to browser: https://docs.rs/hyper/latest/hyper/body/struct.Body.html#method.wrap_stream

Fallback: 

https://docs.rs/stream-body/latest/stream_body/#examples

-- ds.h1: HostN Static Writer: HSW

Writer endpoint: api.hostn-apps.com.

Source code of HSW is in FifthTry/hsw repo.

-- ds.h2: /create/ API

/create/?package=<package-name>&list-size=<size-of-list-file-in-bytes>
Body: <content of LIST.tejar-list file>+<content of files.tejar file>

Returns:

```json
{
    "success": true,
    "key": "<secret-key>"
}
```

KEY is part of LIST.tejar-list, but create API ignores the key from LIST.tejar-list and generates a 
new key and stores it as part of LIST.tejar-list.

-- ds.h2: /update/ API

/udpate/?package=<package-name>&list-size=<size-of-list-file-in-bytes>
Body: <content of LIST.json file>+<content of files.tejar file>

Returns:

```json
{
    "success": true
}
```

Key is part of LIST.tejar-list, so before overwriting the content HSW verifies that
key matches the old key, if not returns "key mis-match" error.

-- ds.h2: Differential Upload

The /update/ api uploads the full data file, even when most of the files may not have changed.

To only upload what has changed we first download the current `tejar list` file, and compare
the local `tejar data` file, and only upload what has changed. 

The hsw gets the last data file, and applies the newly uploaded "diff". Latest list will contain
the information about all the files. Latest data only contains files that are changed. From the
previous data file the unchanged files can be extracted and a new full data file can be created.

-- ds.h1: Tejar

Crate name: tejar, Source: FifthTry/hsr/tejar. 

-- ds.code: to create the files
lang: rs

tejar::create(root: std::path::Path, files: Vec<(String /* mime */, std::path::Path)>) 
    -> Result<tejar::Tejar, tejar::CreateError>

struct Tejar {
    content_file_name: String,
    list: Vec<TejarRecord>, 
    files: Vec<u8>
}

struct TejarRecord {
    file_name: String,
    offset: u32,
    file_size: u32,
    content_type: String,
}

-- ds.code: Read
lang: rs

tejar::read(list_content: String) -> Result<tejar::Reader, tejar::ReadError>

pub struct Reader {
    content_file_name: String,
    list: Vec<TejarRecord>,
}

impl Reader {
    fn get_file(file_path: String) -> Result<tejar::FileInfo, tejar::InfoError>
}

struct FileInfo {
    content_type: String,
    offset: u32,
    size: u32,
    checksum: Vec<u8>,
}

-- ds.h1: Debug vs Production

For local testing, `--debug` argument can be passed to both HSR and HSW services. In the
debug mode `HOSTN_STATIC_STORE=/tmp/hostn-static` environment variable will be used. 
`HOSTN_STATIC_STORE` folder will be created it if does not exist.


