-- ds.page: HostN Static Architecture

-- ds.h1: HostN Static S3 Interface: HSSI

We have reader and writers, and they communicate with each other via HSSI.

$BUCKET/<package-name>/LIST.tejar-list
$BUCKET/<package-name>/DATA-<ts>.tejar-data

Eg: $BUCKET/amitu.com/LIST.tejar-list or $BUCKET/window-button.fastn-apps.com/LIST.tejar-list.

Note: `LIST.tajar-list` is append only files. `DATA.tejar-<ts>.data` file is immutable file.

We also have a `$BUCKET/updated-packages.txt` file, which contains an entry for every time any package is updated:

<timestamp>: <package-name>

This will be used to invalidate caches.


-- ds.h2: Domain Only Packages

This service does not support package-names that are not domain names: eg foo.com is 
supported but foo.com/bar is not supported.



-- ds.h2: Case Insensitive Domains

Package-name would be case insensitive, and names would be lowercased before 
storage/matching. This is the expected behaviour for dealing with domain names as they
domains supposed to be case insensitive.



-- ds.h1: HostN Static Reader: HSR

This is a HTTP service deployed on Fly as a [FLy App](https://fly.io/docs/hands-on/launch-app/). All read 
requests land to this service.

Source code of HSR is in [FifthTry/hsr](https://github.com/FifthTry/hsr).

-- ds.h2: Only GET and HEAD methods

HSR only supports these two methods. All other methods give <DISALLOED METHODS ERROR>.

-- ds.h2: Read Operation

HSR service reads the domain name by reading the HOST header. **Domain name is the package name**.

HSR then reads the `$BUCKET/<package-name>/LIST.tejar-list`. 

If LIST.json is missing it returns 404 (with reason: no such package). Reason will be embedded
in the HTML response.

Path to file mapping: Then HSR finds the document corresponding to the request path. Eg if 
path is `/` it looks for index.html, `/foo/`: `foo/index.html` and for `anything/with.extension` 
it looks for `anything/with.extension`.

HSR then checks if the file is present in `LIST.tejar-list`, if not it returns 404 with reason: no 
such file.

HSR then finds the `data-file`, `start` and `length` from LIST.tejar-list for the latest entry for `file`. And 
makes a read request to `data-file` with `start` and `lenth`, and serves the file.

Mime Type Handling: `LIST.tejar-list` also contains extensions.

-- ds.h2: read_list()

-- ds.code:
lang: rs

async fn read_list(package_name: String) -> std::io::Result<String>

-- ds.markdown:

The string returned by `hsr::read_list()` is passed to `tajar::read()`.

-- ds.h2: read_in_memory()

-- ds.code:
lang: rs

async fn read_in_memory(files_tejar: String, start: u32, size: u32) -> tokio::io::Result<Vec<u8>>

-- ds.markdown:

`file` would be something like `$BUCKET/<package-name>/FILES.tejar-data`.

We will call this function if file size is less than or equal to `hsr::CACHE_TRESHOLD`.

-- ds.h2: Historical Read Operation

Historical read is on a subdomain for any package, eg `ts-123123123.amitu.com` or `ts-123123123.amitu.fastn-site.com`
is supported.

If `ts-<timestamp>.<package-name>` is accessed, the requirement:

> HSR then finds the `data-file`, `start` and `length` from LIST.tejar-list for the latest entry for 
> `file`. And makes a read request to `data-file` with `start` and `lenth`, and serves the file.

Instead becomes:

> HSR then finds the `data-file`, `start` and `length` from LIST.tejar-list for the latest entry, **with 
> timestamp <= <timestamp in query parameter>** for the `file`. And makes a read request to `data-file` with 
> `start` and `lenth`, and serves the file.

In no ts is present as subdomain, if we use <current-time> as default value, we only have to implement one logic.

Note: In future META file will decide if historical reads are allowed or not. For now it is always allowed.

-- ds.h2: HSR Cache

In the updated design of `tejar`, `tejar::TejarRecord` contains the following:

-- ds.code:
lang: rs

pub struct TejarRecord {
    file_name: String, // index.html
    offset: u32,
    data_file: String, // <some-package>/DATA-<ts>.tejar-data: some package could be any package
    file_size: u32,
    content_type: String,
    checksum: String
}

pub struct Reader {
    list: Vec<TejarRecord>,
}

pub struct CachedReader {
    reader: tejar::Reader,
    current_length: usize, // size of tejar file so far, on every update this length may go up
}

type Checksum = String;

-- ds.markdown:

In `hsr` we cache `PACKAGE_LIST_CACHE` which is of type `lru::LruCache<String, CachedReader>`. 

Another cache that we maintain in `hsr` is `FILES_CACHE`, which is of type `lru::LruCache<Checksum, Vec<u8>>`, which maps
`checksum` to `file content`.

-- ds.h3: Cache Purge

Every minute `hsr` downloads `$BUCKET/updated-packages.txt`. The content of this file is also stored globally.

When redownloading the file, we will use the range query, to only download the changes written in the `updated-package.txt`
file instead of re-downloading the whole file.

Any package that updated since last access, and is accessed next, we will download the appended portion in LIST file.


-- ds.h2: streaming_read()

-- ds.code:
lang: ftd

async fn streaming_read(files_tejar: String, start: u32, size: u32) -> 
  impl Stream<Item=Vec<u8>>


-- ds.markdown:

`file` would be something like `$BUCKET/<package-name>/DATA-<ts>.tejar-data`.

This function reads content from S3 in a streaming way. This will be called if file size
is bigger than `hsr::CACHE_TRESHOLD`, and will be sent to browser in a streaming way.

Preferred: 

https://stackoverflow.com/questions/56435409/

This gives us a stream: https://docs.rs/reqwest/latest/reqwest/struct.Response.html#method.bytes_stream

This takes the stream returns to browser: https://docs.rs/hyper/latest/hyper/body/struct.Body.html#method.wrap_stream

Fallback: 

https://docs.rs/stream-body/latest/stream_body/#examples

-- ds.h1: `fastn-cw`

Writer endpoint: api.hostn-apps.com.

Source code of `fastn-cw` is in [FifthTry/fastn-cw](https://github.com/FifthTry/fastn-cw) repo.

-- ds.h2: /create/ API

/create/?package=<package-name>
Body: <content of LIST.tejar-list file>

Returns:

-- ds.code:
lang: json

{
    "success": true,
    "key": "<secret-key>",
    "missing_hashes": [<each-hash>, <that-we>, <do-not>, <already-have>]
}

-- ds.code: TempList Table
lang: py

class PartialList(models.Model):
    package_name = models.TextField(max_length=2000, index=True)
    key = models.TextField()
    list_content = models.TextField()
    # created_at # will never be updated, will get deleted on successful update

-- ds.markdown: 

`fastn-cw` generates a new key and stores it in the `PartialList` table.

-- ds.code: ContentHash table
lang: py

class Checksum(models.Model):
    hash = models.TextField(max_length=40, index=True) # sha256
    data = models.TextField(max_length=2000)
    start = models.IntegerField()
    size = models.IntegerField()

-- ds.markdown: 

/create/ API then looks at each checksum in the Checksum table, and finds the checksum in the list
file that is not present in the Checksum table, and returns this list to the `fastn` cli.

Fastn-cli then makes another HTTP request to `upload-new-package` api and sends the 

-- ds.h2: /upload-new-package/ API

/upload-new-package/?package=<package-name>&key=<key>
Body: <content of missing hashes DATA.tejar-data file>

This API is called after /create/ api returns successfully. 

`fastn-cw` checks if the package and key matches in the `PartialList` table. If so it takes the
`current time stamp` and creates two files: `<bucket><package-name>/LIST.tejar-list` and 
`<bucket><package-name>/DATA-<current time stamp>.tejar-data` files. When uploading LIST file, 
the current system time will be used in each `FileInfo` record, we will ignore the timestamp 
sent by client as it may be wrong.

It also deletes the entry from `PartialList` table and inserts it into Package table.

-- ds.code: Package Table
lang: py

class Package(models.Model):
    name = models.TextField(max_length=2000, index=True)
    key = models.TextField()
    # created_at, updated_at

-- ds.markdown:

And finally it adds one entry for each file in missing-hashes in the `Checksum` table.


-- ds.h2: /update/ API

/udpate/?package=<package-name>&key=<key>
Body: <content of LIST.json file>

Returns:

```json
{
    "success": true,
    "missing_hashes": [<each-hash>, <that-we>, <do-not>, <already-have>]
}
```

`update` api verifies the key matches with one stored in Package table. `update` api then stores
the data in `PartialList` table.

`fastn cli` then has to make a request to `upload-updated-package` api.


-- ds.h2: `upload-updated-package` api

/upload-updated-package/?package=<package-name>&key=<key>
Body: <content of missing hashes DATA.tejar-data file>

This API is called after /udpate/ api returns successfully. 

`fastn-cw` checks if the package and key matches in the `PartialList` table. If so it takes the
`current time stamp` and creates `<bucket><package-name>/DATA-<current time stamp>.tejar-data` file. 
It then takes the list_content from `PartialList` table and appends to 
`<bucket><package-name>/LIST.tejar-list` file.  When appending, the current system time will be used
in each `FileInfo` record, we will ignore the timestamp sent by client as it may be wrong.

It also deletes the entry from `PartialList` table and and updates Package table (updated_on column).
And finally it adds one entry for each file in missing-hashes in the `Checksum` table.


-- ds.h1: Tejar

Crate name: tejar, Source: FifthTry/hsr/tejar.

-- ds.code: to create the files
lang: rs

tejar::create(root: std::path::Path, files: Vec<(String /* mime */, std::path::Path)>) 
    -> Result<tejar::Tejar, tejar::CreateError>

struct Tejar {
    content_file_name: String,
    list: Vec<TejarRecord>, 
    files: Vec<u8>
}

struct TejarRecord {
    file_name: String,
    offset: u32,
    file_size: u32,
    content_type: String,
    timestamp: u64, // we will ignore the timestamp of client and re-calculate timestamp on server
}

-- ds.code: Read
lang: rs

tejar::read(list_content: String) -> Result<tejar::Reader, tejar::ReadError>

pub struct Reader {
    content_file_name: String,
    list: Vec<TejarRecord>,
}

impl Reader {
    fn get_file(file_path: String) -> Result<tejar::FileInfo, tejar::InfoError>
}

struct FileInfo {
    content_type: String,
    data_file: String, // <some-package>/DATA-<ts>.tejar-data: some package could be any package
    offset: u32,
    size: u32,
    checksum: Vec<u8>,
    timestamp: u64, // we will ignore the timestamp of client and re-calculate timestamp on server
}

-- ds.h1: Debug vs Production

For local testing, `--debug` argument can be passed to both HSR and HSW services. In the
debug mode `HOSTN_STATIC_STORE=/tmp/hostn-static` environment variable will be used. 
`HOSTN_STATIC_STORE` folder will be created it if does not exist.


